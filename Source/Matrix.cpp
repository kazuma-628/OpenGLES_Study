#include "Matrix.h"

//コンストラクタ
Matrix::Matrix()
{
	//単位行列を生成する（初期化する）
	Identity();
}

//デストラクタ
Matrix::~Matrix()
{
	
}

/*-------------------------------------------------------------------------------
*	関数説明
*	　単位行列を生成する
*	引数
*	　なし
*	戻り値
*	　なし
*-------------------------------------------------------------------------------*/
void Matrix::Identity()
{	
	//行列初期化
	memset(m_val, 0, sizeof(m_val));

	//単位行列設定する
	m_val[0] = 1.0f;
	m_val[5] = 1.0f;
	m_val[10] = 1.0f;
	m_val[15] = 1.0f;

}

/*-------------------------------------------------------------------------------
*	関数説明
*	　移動行列を適応する
*	引数
*	　p_x	：[I/ ]　X 方向の移動量
*	　p_y	：[I/ ]　Y 方向の移動量
*	　p_z	：[I/ ]　Z 方向の移動量
*	戻り値
*	　なし
*-------------------------------------------------------------------------------*/
void Matrix::Translate(const GLfloat p_x, const GLfloat p_y, const GLfloat p_z)
{
	//移動行列を適応
	m_val[12] = m_val[12] + p_x;
	m_val[13] = m_val[13] + p_y;
	m_val[14] = m_val[13] + p_z;
}

/*-------------------------------------------------------------------------------
*	関数説明
*	　行列の値を取得する
*	引数
*	　なし
*	戻り値
*	　行列の値
*-------------------------------------------------------------------------------*/
const GLfloat* Matrix::GetMatrix()
{
	//メンバに保存されているマトリックスを返却
	return m_val;
}